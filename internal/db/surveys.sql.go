// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: surveys.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createSurvey = `-- name: CreateSurvey :one
INSERT INTO surveys (
  user_id, title, state, visibility, description
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, user_id, title, state, visibility, description, created_at, updated_at
`

type CreateSurveyParams struct {
	UserID      int64
	Title       string
	State       string
	Visibility  string
	Description sql.NullString
}

func (q *Queries) CreateSurvey(ctx context.Context, arg CreateSurveyParams) (Survey, error) {
	row := q.db.QueryRowContext(ctx, createSurvey,
		arg.UserID,
		arg.Title,
		arg.State,
		arg.Visibility,
		arg.Description,
	)
	var i Survey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.State,
		&i.Visibility,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSurvey = `-- name: DeleteSurvey :exec
DELETE FROM surveys
WHERE id = ?
`

func (q *Queries) DeleteSurvey(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSurvey, id)
	return err
}

const listSurveys = `-- name: ListSurveys :many
SELECT surveys.id, surveys.user_id, surveys.title, surveys.state, surveys.visibility, surveys.description, surveys.created_at, surveys.updated_at, COUNT(survey_responses.id) AS response_count FROM surveys
LEFT JOIN survey_responses
ON survey_responses.survey_id = surveys.id
AND survey_responses.rank = 0
ORDER BY surveys.id DESC LIMIT 100
`

type ListSurveysRow struct {
	ID            int64
	UserID        int64
	Title         string
	State         string
	Visibility    string
	Description   sql.NullString
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ResponseCount int64
}

func (q *Queries) ListSurveys(ctx context.Context) ([]ListSurveysRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveysRow
	for rows.Next() {
		var i ListSurveysRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.State,
			&i.Visibility,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResponseCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveysForUser = `-- name: ListSurveysForUser :many
SELECT surveys.id, surveys.user_id, surveys.title, surveys.state, surveys.visibility, surveys.description, surveys.created_at, surveys.updated_at, COUNT(survey_responses.id) AS response_count FROM surveys
LEFT JOIN survey_responses
ON survey_responses.survey_id = surveys.id
AND survey_responses.rank = 0
WHERE surveys.user_id = ?
GROUP BY surveys.id
ORDER BY surveys.id DESC LIMIT 100
`

type ListSurveysForUserRow struct {
	ID            int64
	UserID        int64
	Title         string
	State         string
	Visibility    string
	Description   sql.NullString
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ResponseCount int64
}

func (q *Queries) ListSurveysForUser(ctx context.Context, userID int64) ([]ListSurveysForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveysForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveysForUserRow
	for rows.Next() {
		var i ListSurveysForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.State,
			&i.Visibility,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResponseCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveysForUserResponded = `-- name: ListSurveysForUserResponded :many
SELECT surveys.id, surveys.user_id, surveys.title, surveys.state, surveys.visibility, surveys.description, surveys.created_at, surveys.updated_at, COUNT(sr.id) AS response_count FROM surveys
JOIN survey_responses sr
ON sr.survey_id = surveys.id
AND sr.rank = 0
WHERE EXISTS (
  SELECT 1 FROM survey_responses WHERE survey_responses.survey_id = surveys.id AND survey_responses.user_id = ?
)
GROUP BY surveys.id
ORDER BY surveys.id DESC LIMIT 100
`

type ListSurveysForUserRespondedRow struct {
	ID            int64
	UserID        int64
	Title         string
	State         string
	Visibility    string
	Description   sql.NullString
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ResponseCount int64
}

func (q *Queries) ListSurveysForUserResponded(ctx context.Context, userID sql.NullInt64) ([]ListSurveysForUserRespondedRow, error) {
	rows, err := q.db.QueryContext(ctx, listSurveysForUserResponded, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListSurveysForUserRespondedRow
	for rows.Next() {
		var i ListSurveysForUserRespondedRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.State,
			&i.Visibility,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResponseCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSurvey = `-- name: ReadSurvey :one
SELECT surveys.id, surveys.user_id, surveys.title, surveys.state, surveys.visibility, surveys.description, surveys.created_at, surveys.updated_at, COUNT(survey_responses.id) AS response_count FROM surveys
LEFT JOIN survey_responses
ON survey_responses.survey_id = surveys.id
AND survey_responses.rank = 0
WHERE surveys.id = ?
GROUP BY surveys.id LIMIT 1
`

type ReadSurveyRow struct {
	ID            int64
	UserID        int64
	Title         string
	State         string
	Visibility    string
	Description   sql.NullString
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ResponseCount int64
}

func (q *Queries) ReadSurvey(ctx context.Context, id int64) (ReadSurveyRow, error) {
	row := q.db.QueryRowContext(ctx, readSurvey, id)
	var i ReadSurveyRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.State,
		&i.Visibility,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ResponseCount,
	)
	return i, err
}

const updateSurvey = `-- name: UpdateSurvey :one
UPDATE surveys SET
user_id = coalesce(?1, user_id),
title = coalesce(?2, title),
state = coalesce(?3, state),
visibility = coalesce(?4, visibility),
description = coalesce(?5, description),
updated_at = CURRENT_TIMESTAMP
WHERE id = ?6
RETURNING id, user_id, title, state, visibility, description, created_at, updated_at
`

type UpdateSurveyParams struct {
	UserID      sql.NullInt64
	Title       sql.NullString
	State       sql.NullString
	Visibility  sql.NullString
	Description sql.NullString
	ID          int64
}

func (q *Queries) UpdateSurvey(ctx context.Context, arg UpdateSurveyParams) (Survey, error) {
	row := q.db.QueryRowContext(ctx, updateSurvey,
		arg.UserID,
		arg.Title,
		arg.State,
		arg.Visibility,
		arg.Description,
		arg.ID,
	)
	var i Survey
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.State,
		&i.Visibility,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
