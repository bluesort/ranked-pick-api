// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: survey_options.sql

package db

import (
	"context"
)

const createSurveyOption = `-- name: CreateSurveyOption :one
INSERT INTO survey_options (
  survey_id, title
) VALUES (
  ?, ?
)
RETURNING id, survey_id, title, created_at, updated_at
`

type CreateSurveyOptionParams struct {
	SurveyID int64
	Title    string
}

func (q *Queries) CreateSurveyOption(ctx context.Context, arg CreateSurveyOptionParams) (SurveyOption, error) {
	row := q.db.QueryRowContext(ctx, createSurveyOption, arg.SurveyID, arg.Title)
	var i SurveyOption
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSurveyOption = `-- name: DeleteSurveyOption :exec
DELETE FROM survey_options
WHERE id = ?
`

func (q *Queries) DeleteSurveyOption(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSurveyOption, id)
	return err
}

const listSurveyOptionsForSurvey = `-- name: ListSurveyOptionsForSurvey :many
SELECT id, survey_id, title, created_at, updated_at FROM survey_options
WHERE survey_id = ?
ORDER BY id ASC LIMIT 100
`

func (q *Queries) ListSurveyOptionsForSurvey(ctx context.Context, surveyID int64) ([]SurveyOption, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyOptionsForSurvey, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyOption
	for rows.Next() {
		var i SurveyOption
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readSurveyOption = `-- name: ReadSurveyOption :one
SELECT id, survey_id, title, created_at, updated_at FROM survey_options
WHERE id = ? LIMIT 1
`

func (q *Queries) ReadSurveyOption(ctx context.Context, id int64) (SurveyOption, error) {
	row := q.db.QueryRowContext(ctx, readSurveyOption, id)
	var i SurveyOption
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSurveyOption = `-- name: UpdateSurveyOption :one
UPDATE survey_options SET
title = ?
WHERE id = ?
RETURNING id, survey_id, title, created_at, updated_at
`

type UpdateSurveyOptionParams struct {
	Title string
	ID    int64
}

func (q *Queries) UpdateSurveyOption(ctx context.Context, arg UpdateSurveyOptionParams) (SurveyOption, error) {
	row := q.db.QueryRowContext(ctx, updateSurveyOption, arg.Title, arg.ID)
	var i SurveyOption
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
