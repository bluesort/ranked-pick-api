// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: survey_answers.sql

package db

import (
	"context"
	"database/sql"
)

const deleteSurveyAnswer = `-- name: DeleteSurveyAnswer :exec
DELETE FROM survey_answers
WHERE id = ?
`

func (q *Queries) DeleteSurveyAnswer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSurveyAnswer, id)
	return err
}

const listSurveyAnswersForSurvey = `-- name: ListSurveyAnswersForSurvey :many
SELECT id, survey_id, survey_option_id, user_id, rank, created_at, updated_at FROM survey_answers
WHERE survey_id = ?
ORDER BY id ASC LIMIT 100
`

func (q *Queries) ListSurveyAnswersForSurvey(ctx context.Context, surveyID int64) ([]SurveyAnswer, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyAnswersForSurvey, surveyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyAnswer
	for rows.Next() {
		var i SurveyAnswer
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.SurveyOptionID,
			&i.UserID,
			&i.Rank,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSurveyAnswersForSurveyUser = `-- name: ListSurveyAnswersForSurveyUser :many
SELECT id, survey_id, survey_option_id, user_id, rank, created_at, updated_at FROM survey_answers
WHERE survey_id = ?
AND user_id = ?
ORDER BY rank ASC LIMIT 100
`

type ListSurveyAnswersForSurveyUserParams struct {
	SurveyID int64
	UserID   int64
}

func (q *Queries) ListSurveyAnswersForSurveyUser(ctx context.Context, arg ListSurveyAnswersForSurveyUserParams) ([]SurveyAnswer, error) {
	rows, err := q.db.QueryContext(ctx, listSurveyAnswersForSurveyUser, arg.SurveyID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SurveyAnswer
	for rows.Next() {
		var i SurveyAnswer
		if err := rows.Scan(
			&i.ID,
			&i.SurveyID,
			&i.SurveyOptionID,
			&i.UserID,
			&i.Rank,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSurveyAnswer = `-- name: UpdateSurveyAnswer :one
UPDATE survey_answers SET
survey_id = coalesce(?2, survey_id),
survey_option_id = coalesce(?3, survey_option_id),
user_id = coalesce(?4, user_id),
rank = coalesce(?5, rank)
WHERE id = ?
RETURNING id, survey_id, survey_option_id, user_id, rank, created_at, updated_at
`

type UpdateSurveyAnswerParams struct {
	SurveyID       sql.NullInt64
	SurveyOptionID sql.NullInt64
	UserID         sql.NullInt64
	Rank           sql.NullInt64
	ID             int64
}

func (q *Queries) UpdateSurveyAnswer(ctx context.Context, arg UpdateSurveyAnswerParams) (SurveyAnswer, error) {
	row := q.db.QueryRowContext(ctx, updateSurveyAnswer,
		arg.SurveyID,
		arg.SurveyOptionID,
		arg.UserID,
		arg.Rank,
		arg.ID,
	)
	var i SurveyAnswer
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.SurveyOptionID,
		&i.UserID,
		&i.Rank,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertSurveyAnswer = `-- name: UpsertSurveyAnswer :one

INSERT INTO survey_answers (
	survey_id, survey_option_id, user_id, rank
) VALUES (
  ?, ?, ?, ?
)
ON CONFLICT (user_id, survey_option_id) DO UPDATE SET
	survey_id = EXCLUDED.survey_id,
	survey_option_id = EXCLUDED.survey_option_id,
	user_id = EXCLUDED.user_id,
	rank = EXCLUDED.rank
RETURNING id, survey_id, survey_option_id, user_id, rank, created_at, updated_at
`

type UpsertSurveyAnswerParams struct {
	SurveyID       int64
	SurveyOptionID int64
	UserID         int64
	Rank           int64
}

// TODO: Add unique survey_answers survey_id,user_id,rank index
func (q *Queries) UpsertSurveyAnswer(ctx context.Context, arg UpsertSurveyAnswerParams) (SurveyAnswer, error) {
	row := q.db.QueryRowContext(ctx, upsertSurveyAnswer,
		arg.SurveyID,
		arg.SurveyOptionID,
		arg.UserID,
		arg.Rank,
	)
	var i SurveyAnswer
	err := row.Scan(
		&i.ID,
		&i.SurveyID,
		&i.SurveyOptionID,
		&i.UserID,
		&i.Rank,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
