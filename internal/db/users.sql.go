// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  password_hash, email, display_name
) VALUES (
  ?, ?, ?
)
RETURNING id, password_hash, email, display_name, created_at, updated_at, email_confirmed
`

type CreateUserParams struct {
	PasswordHash string
	Email        string
	DisplayName  sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.PasswordHash, arg.Email, arg.DisplayName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailConfirmed,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const readUser = `-- name: ReadUser :one
SELECT id, password_hash, email, display_name, created_at, updated_at, email_confirmed FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) ReadUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, readUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailConfirmed,
	)
	return i, err
}

const readUserByEmail = `-- name: ReadUserByEmail :one
SELECT id, password_hash, email, display_name, created_at, updated_at, email_confirmed FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) ReadUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, readUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailConfirmed,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET
email = coalesce(?1, email),
display_name = coalesce(?2, display_name),
updated_at = CURRENT_TIMESTAMP
WHERE id = ?3
RETURNING id, password_hash, email, display_name, created_at, updated_at, email_confirmed
`

type UpdateUserParams struct {
	Email       sql.NullString
	DisplayName sql.NullString
	ID          int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Email, arg.DisplayName, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailConfirmed,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET
password_hash = ?,
updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, password_hash, email, display_name, created_at, updated_at, email_confirmed
`

type UpdateUserPasswordParams struct {
	PasswordHash string
	ID           int64
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.PasswordHash, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.PasswordHash,
		&i.Email,
		&i.DisplayName,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.EmailConfirmed,
	)
	return i, err
}
