// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token_hashes.sql

package db

import (
	"context"
	"time"
)

const deleteTokenHash = `-- name: DeleteTokenHash :exec
DELETE FROM token_hashes
WHERE hash = ?
`

func (q *Queries) DeleteTokenHash(ctx context.Context, hash string) error {
	_, err := q.db.ExecContext(ctx, deleteTokenHash, hash)
	return err
}

const readTokenHashByUserId = `-- name: ReadTokenHashByUserId :one
SELECT id, user_id, hash, expires_at, created_at, updated_at FROM token_hashes
WHERE user_id = ? LIMIT 1
`

func (q *Queries) ReadTokenHashByUserId(ctx context.Context, userID int64) (TokenHash, error) {
	row := q.db.QueryRowContext(ctx, readTokenHashByUserId, userID)
	var i TokenHash
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Hash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertTokenHash = `-- name: UpsertTokenHash :one
INSERT INTO token_hashes (
	user_id, hash, expires_at
) VALUES (
  ?, ?, ?
)
ON CONFLICT (user_id) DO UPDATE SET
	hash = EXCLUDED.hash,
	expires_at = EXCLUDED.expires_at
RETURNING id, user_id, hash, expires_at, created_at, updated_at
`

type UpsertTokenHashParams struct {
	UserID    int64
	Hash      string
	ExpiresAt time.Time
}

func (q *Queries) UpsertTokenHash(ctx context.Context, arg UpsertTokenHashParams) (TokenHash, error) {
	row := q.db.QueryRowContext(ctx, upsertTokenHash, arg.UserID, arg.Hash, arg.ExpiresAt)
	var i TokenHash
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Hash,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
